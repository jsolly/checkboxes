---
const parentCheckbox = {
	id: "parent-css",
	label: "Parent",
};

const childCheckboxItems = [
	{ id: "child1-css", label: "Child 1" },
	{ id: "child2-css", label: "Child 2" },
	{ id: "child3-css", label: "Child 3" },
];
---

<div class="px-3 py-2">
  <div class="checkbox-group">
    <!-- Parent checkbox -->
    <div class="p-2 rounded-lg hover:bg-slate-100 transition-colors">
      <div class="flex items-center space-x-3">
        <input 
          type="checkbox" 
          id={parentCheckbox.id}
          class="parent-checkbox"
        />
        <label for={parentCheckbox.id} class="text-slate-700 cursor-pointer text-sm font-medium">
          {parentCheckbox.label}
        </label>
      </div>
    </div>

    <!-- Child checkboxes -->
    <div class="ml-8">
      {childCheckboxItems.map(item => (
        <div class="p-1 rounded-lg hover:bg-slate-100 transition-colors">
          <div class="flex items-center space-x-3">
            <input 
              type="checkbox" 
              id={item.id}
              class="child-checkbox"
            />
            <label for={item.id} class="text-slate-700 cursor-pointer text-sm font-medium">
              {item.label}
            </label>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  /* Base checkbox styles */
  input[type="checkbox"] {
    height: 1rem;
    width: 1rem;
    margin-top: 0.125rem;
    border-radius: 0.25rem;
    border: 1px solid rgb(203 213 225);
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
  }

  input[type="checkbox"]:checked {
    background-color: rgb(37 99 235);
    border-color: rgb(37 99 235);
    background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
  }

  input[type="checkbox"]:focus {
    outline: 2px solid rgb(59 130 246);
    outline-offset: 2px;
  }

  /* Parent-child relationship styles */
  /* Show indeterminate state when some but not all children are checked */
  .checkbox-group:has(.child-checkbox:checked):has(.child-checkbox:not(:checked)) .parent-checkbox {
    background-color: rgb(37 99 235);
    border-color: rgb(37 99 235);
    background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M3 8h10' stroke='white' stroke-width='2'/%3e%3c/svg%3e");
  }

  /* When parent is checked, check all children */
  .checkbox-group:has(.parent-checkbox:checked) .child-checkbox:not(:checked) {
    background-color: rgb(37 99 235);
    border-color: rgb(37 99 235);
    background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
  }

  /* When parent is unchecked, uncheck only unchecked children */
  .checkbox-group:has(.parent-checkbox:not(:checked)) .child-checkbox:not(:checked) {
    background-color: transparent;
    border-color: rgb(203 213 225);
    background-image: none;
  }
</style> 
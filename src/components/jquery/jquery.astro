---
const parentCheckbox = {
	id: "parent-jquery",
	label: "Parent",
};

const childCheckboxItems = [
	{ id: "child1-jquery", label: "Child 1" },
	{ id: "child2-jquery", label: "Child 2" },
	{ id: "child3-jquery", label: "Child 3" },
];
---

<div class="px-3 py-2" data-checkbox-container>
  <div>
    <div class="p-2 rounded-lg hover:bg-slate-100 transition-colors">
      <div class="flex items-center space-x-3">
        <input 
          type="checkbox" 
          id={parentCheckbox.id}
          class="h-4 w-4 mt-0.5 text-blue-600 rounded border-slate-300 focus:ring-blue-500"
        >
        <label for={parentCheckbox.id} class="text-slate-700 cursor-pointer text-sm font-medium">
          {parentCheckbox.label}
        </label>
      </div>
    </div>

    <div class="ml-8">
      {childCheckboxItems.map(item => (
        <div class="p-1 rounded-lg hover:bg-slate-100 transition-colors">
          <div class="flex items-center space-x-3">
            <input 
              type="checkbox" 
              id={item.id}
              class="h-4 w-4 mt-0.5 text-blue-600 rounded border-slate-300 focus:ring-blue-500"
            >
            <label for={item.id} class="text-slate-700 cursor-pointer text-sm font-medium">
              {item.label}
            </label>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
import $ from 'jquery';

$('[data-checkbox-container]').each(function() {
  const $container = $(this);
  const $parent = $container.find('input:first');
  const $children = $container.find('.ml-8 input');

  function updateParent() {
    const total = $children.length;
    const checked = $children.filter(':checked').length;
    
    $parent.prop('checked', checked === total);
    $parent.prop('indeterminate', checked > 0 && checked < total);
  }

  $parent.on('change', () => {
    $children.prop('checked', $parent.prop('checked'));
  });

  $children.on('change', updateParent);
});
</script> 
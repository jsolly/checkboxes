---
import FrameworkControls from "../components/FrameworkControls";
import AlpineContainer from "../components/alpine/alpineContainer.astro";
import CssOnlyContainer from "../components/cssOnly/cssOnlyContainer.astro";
import HyperscriptContainer from "../components/hyperscript/hyperscriptContainer.astro";
import JQueryContainer from "../components/jquery/jqueryContainer.astro";
import ReactContainer from "../components/react/ReactContainer.astro";
import SvelteContainer from "../components/svelte/SvelteContainer.astro";
import VanillajsContainer from "../components/vanillajs/vanillajsContainer.astro";
import VueContainer from "../components/vue/vueContainer.astro";
import { FRAMEWORKS, type FrameworkId } from "../config/frameworks";
import Layout from "../layouts/Layout.astro";

const containerMap = {
	vanillajs: VanillajsContainer,
	alpine: AlpineContainer,
	vue: VueContainer,
	react: ReactContainer,
	svelte: SvelteContainer,
	hyperscript: HyperscriptContainer,
	cssOnly: CssOnlyContainer,
	jquery: JQueryContainer,
} as const;

const frameworks = Object.entries(FRAMEWORKS).map(([id]) => ({
	id: id as FrameworkId,
	Component: containerMap[id as keyof typeof containerMap],
}));
---

<Layout>
	<div class="min-h-screen p-8 bg-gradient-to-br from-indigo-50 via-white to-purple-50">
		<div class="max-w-6xl mx-auto mb-12 text-center">
			<h1 class="text-4xl font-bold text-gray-800 mb-2">Nested Checkboxes</h1>
			<p class="text-lg text-gray-600">See how different frameworks handle parent-child relationships</p>
			<p class="text-sm text-slate-500 mt-4 lg:hidden">
				Switch to desktop view to compare frameworks side by side
			</p>
		</div>

		<FrameworkControls client:only="react" />
		
		<div 
			id="framework-grid" 
			class="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto"
		>
			{frameworks.map(({ Component }) => (
				<Component />
			))}
		</div>
	</div>
</Layout>

<script>
	import { 
		type SortableEvent, 
		type FrameworkSelectionEvent, 
		type FrameworkSortEvent, 
		type FrameworkId,
		isValidFramework 
	} from "../config/frameworks";
	import Sortable from "sortablejs";

	/**
	 * Initializes Sortable.js on the framework grid
	 * @param gridElement The grid element to make sortable
	 */
	function initializeSortable(gridElement: HTMLElement) {
		const isMobile = window.innerWidth < 1024;

		return new Sortable(gridElement, {
			animation: 150,
			easing: "cubic-bezier(0.2, 0, 0.2, 1)",
			dragoverBubble: true,
			draggable: '.framework-container:not(.hidden)',
			ghostClass: "sortable-ghost",
			chosenClass: "dragging",
			onStart: handleDragStart,
			onEnd: handleDragEnd,
			disabled: isMobile,
			delay: 0,
			delayOnTouchOnly: true,
			touchStartThreshold: 3
		});
	}

	function handleDragStart(evt: SortableEvent) {
		evt.item.classList.add('dragging');
		document.body.style.cursor = 'grabbing';
	}

	function handleDragEnd(evt: SortableEvent) {
		evt.item.classList.remove('dragging');
		document.body.style.cursor = '';
		saveFrameworkOrder();
		
		// Dispatch event to reset sort dropdown
		document.dispatchEvent(new CustomEvent("frameworkManualSort"));
	}

	function saveFrameworkOrder() {
		const grid = document.getElementById('framework-grid');
		if (!grid) return;

		const order = Array.from(grid.children)
			.filter(child => !child.classList.contains('hidden'))
			.map(child => child.getAttribute('data-framework') as FrameworkId);
		localStorage.setItem('frameworkOrder', JSON.stringify(order));
	}

	function restoreFrameworkOrder(gridElement: HTMLElement) {
		const savedOrder = localStorage.getItem('frameworkOrder');
		if (!savedOrder) return;

		try {
			const order = JSON.parse(savedOrder);
			const containers = Array.from(gridElement.children);
			
			for (const frameworkId of order) {
				const container = containers.find(
					c => c.getAttribute('data-framework') === frameworkId
				);
				if (container) {
					gridElement.appendChild(container);
				}
			}
		} catch (e) {
			console.error('Error restoring framework order:', e);
		}
	}

	/**
	 * Handles framework visibility transitions
	 * @param container The framework container element
	 * @param isVisible Whether the framework should be visible
	 */
	function handleFrameworkVisibility(container: HTMLElement, isVisible: boolean) {
		if (!isVisible) {
			hideFramework(container);
		} else {
			showFramework(container);
		}
	}

	function hideFramework(container: HTMLElement) {
		container.style.transform = 'scale(0.95)';
		container.style.opacity = '0';
		
		container.addEventListener('transitionend', function hideContainer(e) {
			if (e.propertyName === 'opacity') {
				container.classList.add('hidden');
				container.removeEventListener('transitionend', hideContainer);
			}
		});
	}

	function showFramework(container: HTMLElement) {
		container.classList.remove('hidden');
		// Force a reflow
		void container.offsetWidth;
		container.style.transform = 'scale(1)';
		container.style.opacity = '1';
	}

	// Add a resize handler to enable/disable Sortable based on screen width
	let sortableInstance: Sortable | null = null;

	function handleResize() {
		const grid = document.getElementById('framework-grid');
		if (!grid || !sortableInstance) return;

		const isMobile = window.innerWidth < 1024;
		sortableInstance.option('disabled', isMobile);
	}

	// Initialize
	const grid = document.getElementById('framework-grid');
	if (grid) {
		sortableInstance = initializeSortable(grid);
		restoreFrameworkOrder(grid);
		
		// Add resize listener
		window.addEventListener('resize', handleResize);

		// Clean up on page unload
		window.addEventListener('unload', () => {
			window.removeEventListener('resize', handleResize);
			sortableInstance?.destroy();
		});

		// Handle framework selection events
		document.addEventListener('frameworkSelection', ((e: FrameworkSelectionEvent) => {
			const selectedFrameworks = e.detail;
			document.querySelectorAll('.framework-container').forEach((element) => {
				const container = element as HTMLElement;
				const framework = container.getAttribute('data-framework');
				if (isValidFramework(framework)) {
					handleFrameworkVisibility(container, selectedFrameworks.includes(framework));
				}
			});
		}) as EventListener);
	}

	// Add handler for sort events
	document.addEventListener('frameworkSort', ((e: FrameworkSortEvent) => {
		const grid = document.getElementById('framework-grid');
		if (!grid) return;

		const containers = Array.from(grid.children);
		
		e.detail.order.forEach((frameworkId) => {
			const container = containers.find(
				c => c.getAttribute('data-framework') === frameworkId
			);
			if (container) {
				grid.appendChild(container);
			}
		});

		// Save the new order if it's not a "none" sort
		if (e.detail.type !== 'none') {
			saveFrameworkOrder();
		}
	}) as EventListener);
</script>

<style>
	.framework-container {
		transform-origin: top;
		transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
	}

	.framework-container.hidden {
		display: none;
	}

	#framework-grid {
		display: grid;
		grid-auto-rows: min-content;
	}

	/* Only show grab cursor on desktop devices */
	@media (min-width: 1024px) {
		.framework-container {
			cursor: grab;
		}
		
		.framework-container.dragging {
			cursor: grabbing;
		}
	}
</style>


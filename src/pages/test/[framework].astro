---
import AlpineContainer from "../../components/alpine/alpineContainer.astro";
import CssOnlyContainer from "../../components/css-only/cssOnlyContainer.astro";
import HyperscriptContainer from "../../components/hyperscript/hyperscriptContainer.astro";
import JQueryContainer from "../../components/jquery/jqueryContainer.astro";
import ReactContainer from "../../components/react/ReactContainer.astro";
import SvelteContainer from "../../components/svelte/SvelteContainer.astro";
import VanillaContainer from "../../components/vanilla-js/vanillaContainer.astro";
import VueContainer from "../../components/vue/vueContainer.astro";
import Layout from "../../layouts/Layout.astro";

export function getStaticPaths() {
	return [
		{ params: { framework: "vanilla" } },
		{ params: { framework: "alpine" } },
		{ params: { framework: "vue" } },
		{ params: { framework: "react" } },
		{ params: { framework: "svelte" } },
		{ params: { framework: "hyperscript" } },
		{ params: { framework: "css-only" } },
		{ params: { framework: "jquery" } },
	];
}

const { framework } = Astro.params;

type FrameworkId =
	| "vanilla"
	| "alpine"
	| "vue"
	| "react"
	| "svelte"
	| "hyperscript"
	| "css-only"
	| "jquery";

const containers = {
	vanilla: VanillaContainer,
	alpine: AlpineContainer,
	vue: VueContainer,
	react: ReactContainer,
	svelte: SvelteContainer,
	hyperscript: HyperscriptContainer,
	"css-only": CssOnlyContainer,
	jquery: JQueryContainer,
} as const;

// Type guard to check if framework is valid
function isValidFramework(
	framework: string | undefined,
): framework is FrameworkId {
	return framework !== undefined && framework in containers;
}

if (!isValidFramework(framework)) {
	return Astro.redirect("/404");
}

const Container = containers[framework];
---

<Layout title={`${framework} Test Page`}>
	<div class="min-h-screen p-8">
		<Container />
	</div>
</Layout> 